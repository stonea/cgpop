!|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
!BOP
! !MODULE: boundary

 module mpi2s_boundary

! !DESCRIPTION:
!  This module contains data types and routines for updating ghost cell
!  boundaries using MPI calls
!
! !REVISION HISTORY:
!  CVS:$Id: boundary.F90,v 1.1.1.1 2005/08/12 16:58:44 dennis Exp $
!  CVS:$Name:  $

! !USES:

   use kinds_mod, only : i4, r8, r4, log_kind
   use stype, only : distrb
   use communicate, only : my_task
   use constants, only : field_loc_Eface, field_loc_Nface, field_loc_NEcorner, &
	field_loc_center, field_type_angle, field_type_vector, field_type_scalar, p5, c0
   use blocks, only : nghost,nblocks_x,nblocks_y, nx_block, &
	get_block_id, get_block_parameter
   use exit_mod, only : sigAbort, exit_POP
   !use timers

   implicit none
   private
   save

! !PUBLIC TYPES:

   type, public :: bndy
     integer (i4) :: &
       communicator       ,&! communicator to use for update messages
       nlocal_ew          ,&! num local copies for east-west bndy update
       nlocal_ns            ! num local copies for east-west bndy update

     integer (i4), dimension(:), pointer :: &
       local_ew_src_block ,&! source block for each local east-west copy
       local_ew_dst_block ,&! dest   block for each local east-west copy
       local_ns_src_block ,&! source block for each local north-south copy
       local_ns_dst_block   ! dest   block for each local north-south copy

     integer (i4), dimension(:,:), pointer :: &
       local_ew_src_add   ,&! starting source address for local e-w copies
       local_ew_dst_add   ,&! starting dest   address for local e-w copies
       local_ns_src_add   ,&! starting source address for local n-s copies
       local_ns_dst_add     ! starting dest   address for local n-s copies

   end type bndy

! !PUBLIC MEMBER FUNCTIONS:

   public :: mpi2s_create_boundary,  &
             mpi2s_destroy_boundary, &
	     mpi2s_boundary_2d


   interface mpi2s_boundary_2d ! generic interface
     module procedure boundary_2d_dbl
     module procedure boundary_2d_int
   end interface

!EOP
!BOC
!EOC
!***********************************************************************

contains

!***********************************************************************
!BOP
! !IROUTINE: create_boundary
! !INTERFACE:

 subroutine mpi2s_create_boundary(newbndy, dist, blocks, &
                            ns_bndy_type, ew_bndy_type, &
                            nx_global, ny_global)

! !DESCRIPTION:
!  This routine creates a boundary type with info necessary for
!  performing a boundary (ghost cell) update based on the input block
!  distribution.
!
! !REVISION HISTORY:
!  same as module

! !INPUT PARAMETERS:

   type (distrb), intent(in) :: &
      dist       ! distribution of blocks across procs

   integer (i4) :: blocks(:)

   character (*), intent(in) :: &
      ns_bndy_type,             &! type of boundary to use in ns dir
      ew_bndy_type               ! type of boundary to use in ew dir

   integer (i4), intent(in) :: &
      nx_global, ny_global       ! global extents of domain

! !OUTPUT PARAMETERS:

   type (bndy), intent(out) :: &
      newbndy    ! a new boundary type with info for updates

!EOP
!BOC
!-----------------------------------------------------------------------
!
!  local variables
!
!-----------------------------------------------------------------------

   integer (i4) ::           &
      i,j,k,n,                     &! dummy counters
      iblock_src  , jblock_src  ,  &! i,j index of source block
      iblock_dst  , jblock_dst  ,  &! i,j index of dest   block
      iblock_north, jblock_north,  &! i,j index of north neighbor block
      iblock_south, jblock_south,  &! i,j index of south neighbor block
      iblock_east , jblock_east ,  &! i,j index of east  neighbor block
      iblock_west , jblock_west ,  &! i,j index of west  neighbor block
      src_block_loc,               &! local block location of source
      dst_block_loc,               &! local block location of dest
      nprocs,                      &! num of processors involved
      nblocks,                     &! total number of blocks
      iloc_ew, iloc_ns,            &!
      src_proc, dst_proc            ! src,dst processor for message

!CLEAN   type (block) ::     &
!CLEAN      src_block,       &! block info for source      block
!CLEAN      dst_block         ! block info for destination block

!JMD Record my neighbors for later use...
!JMD Will replace the O(nblocks*nblocks) algorithm with a
!JMD O(4*nblocks)
   integer(i4), dimension(:,:), allocatable :: &
      Neigh             ! array of block neighbors

   integer(i4), parameter :: east  = 1, &! index of east neighbor
                                   west  = 2, &! index of west neighbor
                                   north = 3, &! index of north neighbor
                                   south = 4   ! index of south neighbor

    integer(i4) :: kk,gbid
    integer(i4) :: sbie,sbje,dbie,dbje
    integer(i4), parameter :: NumNeigh = 4  ! Number of neighbors

!-----------------------------------------------------------------------
!
!  Initialize some useful variables and return if this task not
!  in the current distribution.
!
!-----------------------------------------------------------------------

   nprocs = dist%nprocs

   if (my_task >= nprocs) return

   nblocks = size(dist%proc(:))
   newbndy%communicator = dist%communicator

   allocate(Neigh(NumNeigh,nblocks))
!-----------------------------------------------------------------------
!
!  Count the number of messages to send/recv from each processor
!  and number of blocks in each message.  These quantities are
!  necessary for allocating future arrays.
!
!-----------------------------------------------------------------------

   iloc_ew = 0
   iloc_ns = 0

   print *,'Tile graph:'
   block_loop0: do n=1,nblocks
      src_proc  = dist%proc(n)
 !CLEAN     src_block = get_block(n,n)
      call get_block_parameter(n,iblock=iblock_src,jblock=jblock_src)
      gbid = n

!CLEAN      iblock_src = src_block%iblock  ! i,j index of this block in
!CLEAN      jblock_src = src_block%jblock  !   block cartesian decomposition

      !*** compute cartesian i,j block indices for each neighbor
      !*** use zero if off the end of closed boundary
      !*** use jnorth=nblocks_y and inorth < 0 for tripole boundary
      !***   to make sure top boundary communicated to all top
      !***   boundary blocks

      call GetEWBlockIndex(ew_bndy_type,iblock_src,jblock_src, &
           iblock_east,jblock_east,iblock_west,jblock_west)


      call GetNSBlockIndex(ns_bndy_type,iblock_src, &
           jblock_src,iblock_north,jblock_north,iblock_south,jblock_south)

      !JMD save Neighbor information
      Neigh(east,n)=get_block_id(iblock_east,jblock_east)
      Neigh(west,n)=get_block_id(iblock_west,jblock_west)
      Neigh(north,n)=get_block_id(iblock_north,jblock_north)
      Neigh(south,n)=get_block_id(iblock_south,jblock_south)

      print *, gbid, Neigh(east,n),Neigh(west,n),Neigh(north,n), Neigh(south,n)
   end do block_loop0


   block_loop1: do n=1,nblocks
      src_proc  = dist%proc(n)
!CLEAN      src_block = get_block(n,n)

      call get_block_parameter(n,iblock=iblock_src,jblock=jblock_src)
      gbid = n

!CLEAN     iblock_src = src_block%iblock  ! i,j index of this block in
!CLEAN      jblock_src = src_block%jblock  !   block cartesian decomposition

      !*** compute cartesian i,j block indices for each neighbor
      !*** use zero if off the end of closed boundary
      !*** use jnorth=nblocks_y and inorth < 0 for tripole boundary
      !***   to make sure top boundary communicated to all top
      !***   boundary blocks


      call GetEWBlockIndex(ew_bndy_type,iblock_src,jblock_src, &
           iblock_east,jblock_east,iblock_west,jblock_west)

      call GetNSBlockIndex(ns_bndy_type,iblock_src, &
           jblock_src,iblock_north,jblock_north,iblock_south,jblock_south)

      !***
      !*** if any neighbors are closed boundaries, must
      !*** create a local pseudo-message to zero ghost cells
      !***

      if (src_proc /= 0) then
         if (iblock_east  == 0) iloc_ew = iloc_ew + 1
         if (iblock_west  == 0) iloc_ew = iloc_ew + 1
         if (jblock_north == 0) iloc_ns = iloc_ns + 1
         if (jblock_south == 0) iloc_ns = iloc_ns + 1
      endif

      !***
      !*** now look through all the blocks for the neighbors
      !*** of the source block and check whether a message is
      !*** required for communicating with the neighbor
      !***

!JMD      do k=1,nblocks
      do kk=1,NumNeigh
	 k = Neigh(kk,n)
	 if(k>0) then 
!CLEAN         dst_block = get_block(k,k)
	 call get_block_parameter(k,iblock=iblock_dst,jblock=jblock_dst)

!CLEAN         iblock_dst = dst_block%iblock  !*** i,j block index of
!CLEAN         jblock_dst = dst_block%jblock  !*** potential neighbor block

         dst_proc = dist%proc(k)  ! processor that holds dst block

         !***
         !*** if this block is an eastern neighbor
         !*** increment message counter
         !***

         if (iblock_dst == iblock_east .and. &
             jblock_dst == jblock_east) then

            if (dst_proc /= 0) then
               iloc_ew = iloc_ew + 1
            endif
         endif

         !***
         !*** if this block is an western neighbor
         !*** increment message counter
         !***

         if (iblock_dst == iblock_west .and. &
             jblock_dst == jblock_west) then

            if (dst_proc /= 0) then
               iloc_ew = iloc_ew + 1
            endif
         endif

         !***
         !*** if this block is an northern neighbor
         !*** find out whether a message is required
         !*** for tripole, must communicate with all
         !*** north row blocks (triggered by iblock_dst <0)
         !***

         if ((iblock_dst == iblock_north .or. iblock_north < 0) .and. &
              jblock_dst == jblock_north) then

            if (dst_proc /= 0) then
               iloc_ns = iloc_ns + 1
            endif
         endif

         !***
         !*** if this block is an southern neighbor
         !*** find out whether a message is required
         !***

         if (iblock_dst == iblock_south .and. &
             jblock_dst == jblock_south) then

            if (dst_proc /= 0) then
               iloc_ns = iloc_ns + 1
            endif
         endif

      endif ! k>0
      end do  ! search for dest blocks
   end do block_loop1

   !***
   !*** in this serial version, all messages are local copies
   !***

   newbndy%nlocal_ew = iloc_ew
   newbndy%nlocal_ns = iloc_ns

!-----------------------------------------------------------------------
!
!  allocate buffers and arrays necessary for boundary comms
!
!-----------------------------------------------------------------------

   allocate (newbndy%local_ew_src_block(newbndy%nlocal_ew), &
             newbndy%local_ew_dst_block(newbndy%nlocal_ew), &
             newbndy%local_ns_src_block(newbndy%nlocal_ns), &
             newbndy%local_ns_dst_block(newbndy%nlocal_ns), &
             newbndy%local_ew_src_add(2,newbndy%nlocal_ew), &
             newbndy%local_ew_dst_add(2,newbndy%nlocal_ew), &
             newbndy%local_ns_src_add(2,newbndy%nlocal_ns), &
             newbndy%local_ns_dst_add(2,newbndy%nlocal_ns))

   newbndy%local_ew_src_block = 0
   newbndy%local_ew_dst_block = 0
   newbndy%local_ns_src_block = 0
   newbndy%local_ns_dst_block = 0
   newbndy%local_ew_src_add = 0
   newbndy%local_ew_dst_add = 0
   newbndy%local_ns_src_add = 0
   newbndy%local_ns_dst_add = 0

!-----------------------------------------------------------------------
!
!  now set up indices into buffers and address arrays
!
!-----------------------------------------------------------------------

   iloc_ew = 0
   iloc_ns = 0

!-----------------------------------------------------------------------
!
!  repeat loop through blocks but this time, determine all the
!  required message information for each message or local copy
!
!-----------------------------------------------------------------------

   block_loop2: do n=1,nblocks

      src_proc  = dist%proc(n)    ! processor location for this block
!CLEAN     src_block = get_block(n,n)  ! block info for this block

      call get_block_parameter(n,iblock=iblock_src,jblock=jblock_src,ie=sbie,je=sbje)
!CLEAN      iblock_src = src_block%iblock  ! i,j index of this block in
!CLEAN      jblock_src = src_block%jblock  !   block cartesian decomposition

      if (src_proc /= 0) then
         src_block_loc = dist%local_block(n)  ! local block location
      else
         src_block_loc = 0  ! block is a land block
      endif

      !*** compute cartesian i,j block indices for each neighbor
      !*** use zero if off the end of closed boundary
      !*** use jnorth=nblocks_y and inorth < 0 for tripole boundary
      !***   to make sure top boundary communicated to all top
      !***   boundary blocks

      call GetEWBlockIndex(ew_bndy_type,iblock_src,jblock_src, &
           iblock_east,jblock_east,iblock_west,jblock_west)

      call GetNSBlockIndex(ns_bndy_type,iblock_src, &
           jblock_src, iblock_north,jblock_north,iblock_south,jblock_south)

      !***
      !*** if any boundaries are closed boundaries, set up
      !*** pseudo-message to zero ghost cells
      !***

      if (src_block_loc /= 0) then
         if (iblock_east == 0) then
            iloc_ew = iloc_ew + 1
            newbndy%local_ew_src_block(iloc_ew) = 0
            newbndy%local_ew_src_add(1,iloc_ew) = 0
            newbndy%local_ew_src_add(2,iloc_ew) = 0
            newbndy%local_ew_dst_block(iloc_ew) = src_block_loc
            newbndy%local_ew_dst_add(1,iloc_ew) = sbie + 1
            newbndy%local_ew_dst_add(2,iloc_ew) = 1
         else if (iblock_west == 0) then
            iloc_ew = iloc_ew + 1
            newbndy%local_ew_src_block(iloc_ew) = 0
            newbndy%local_ew_src_add(1,iloc_ew) = 0
            newbndy%local_ew_src_add(2,iloc_ew) = 0
            newbndy%local_ew_dst_block(iloc_ew) = src_block_loc
            newbndy%local_ew_dst_add(1,iloc_ew) = 1
            newbndy%local_ew_dst_add(2,iloc_ew) = 1
         else if (jblock_north == 0) then
            iloc_ns = iloc_ns + 1
            newbndy%local_ns_src_block(iloc_ns) = 0
            newbndy%local_ns_src_add(1,iloc_ns) = 0
            newbndy%local_ns_src_add(2,iloc_ns) = 0
            newbndy%local_ns_dst_block(iloc_ns) = src_block_loc
            newbndy%local_ns_dst_add(1,iloc_ns) = 1
            newbndy%local_ns_dst_add(2,iloc_ns) = sbje + 1
         else if (jblock_south == 0) then
            iloc_ns = iloc_ns + 1
            newbndy%local_ns_src_block(iloc_ns) = 0
            newbndy%local_ns_src_add(1,iloc_ns) = 0
            newbndy%local_ns_src_add(2,iloc_ns) = 0
            newbndy%local_ns_dst_block(iloc_ns) = src_block_loc
            newbndy%local_ns_dst_add(1,iloc_ns) = 1
            newbndy%local_ns_dst_add(2,iloc_ns) = 1
         endif
      endif

      !***
      !*** now search through blocks looking for neighbors to
      !*** the source block
      !***

      do k=1,nblocks

         dst_proc      = dist%proc(k)  ! processor holding dst block

         !***
         !*** compute the rest only if this block is not a land block
         !***

         if (dst_proc /= 0) then

!CLEAN            dst_block = get_block(k,k)  ! block info for this block
            call get_block_parameter(k,iblock=iblock_dst,jblock=jblock_dst,ie=dbie,je=dbje)

!CLEAN            iblock_dst = dst_block%iblock  ! i,j block index in 
!CLEAN            jblock_dst = dst_block%jblock  ! Cartesian block decomposition

            dst_block_loc = dist%local_block(k)  ! local block location

            !***
            !*** if this block is an eastern neighbor
            !*** determine send/receive addresses
            !***

            if (iblock_dst == iblock_east .and. &
                jblock_dst == jblock_east) then

               if (src_proc /= 0) then
                  !*** local copy from one block to another
                  iloc_ew = iloc_ew + 1
                  newbndy%local_ew_src_block(iloc_ew) = src_block_loc
                  newbndy%local_ew_src_add(1,iloc_ew) = sbie - nghost + 1
                  newbndy%local_ew_src_add(2,iloc_ew) = 1
                  newbndy%local_ew_dst_block(iloc_ew) = dst_block_loc
                  newbndy%local_ew_dst_add(1,iloc_ew) = 1
                  newbndy%local_ew_dst_add(2,iloc_ew) = 1
               else
                  !*** source block is all land so treat as local copy
                  !*** with source block zero to fill ghost cells with 
                  !*** zeroes
                  iloc_ew = iloc_ew + 1
                  newbndy%local_ew_src_block(iloc_ew) = 0
                  newbndy%local_ew_src_add(1,iloc_ew) = 0
                  newbndy%local_ew_src_add(2,iloc_ew) = 0
                  newbndy%local_ew_dst_block(iloc_ew) = dst_block_loc
                  newbndy%local_ew_dst_add(1,iloc_ew) = 1
                  newbndy%local_ew_dst_add(2,iloc_ew) = 1
               endif

            endif ! east neighbor

            !***
            !*** if this block is a western neighbor
            !*** determine send/receive addresses
            !***

            if (iblock_dst == iblock_west .and. &
                jblock_dst == jblock_west) then

               if (src_proc /= 0) then
                  !*** perform a local copy
                  iloc_ew = iloc_ew + 1
                  newbndy%local_ew_src_block(iloc_ew) = src_block_loc
                  newbndy%local_ew_src_add(1,iloc_ew) = nghost + 1
                  newbndy%local_ew_src_add(2,iloc_ew) = 1
                  newbndy%local_ew_dst_block(iloc_ew) = dst_block_loc
                  newbndy%local_ew_dst_add(1,iloc_ew) = dbie + 1
                  newbndy%local_ew_dst_add(2,iloc_ew) = 1
               else
                  !*** neighbor is a land block so zero ghost cells
                  iloc_ew = iloc_ew + 1
                  newbndy%local_ew_src_block(iloc_ew) = 0
                  newbndy%local_ew_src_add(1,iloc_ew) = 0
                  newbndy%local_ew_src_add(2,iloc_ew) = 0
                  newbndy%local_ew_dst_block(iloc_ew) = dst_block_loc
                  newbndy%local_ew_dst_add(1,iloc_ew) = dbie + 1
                  newbndy%local_ew_dst_add(2,iloc_ew) = 1
               endif

            endif ! west neighbor

            !***
            !*** if this block is a northern neighbor
            !***  compute send/recv addresses
            !*** for tripole, must communicate with all
            !*** north row blocks (triggered by iblock_north <0)
            !***

            if ((iblock_dst == iblock_north .or. iblock_north < 0) .and. &
                 jblock_dst == jblock_north) then

               if (src_proc /= 0) then
                  !*** local copy
                  iloc_ns = iloc_ns + 1
                  newbndy%local_ns_src_block(iloc_ns) = src_block_loc
                  newbndy%local_ns_src_add(1,iloc_ns) = 1
                  newbndy%local_ns_src_add(2,iloc_ns) = sbje - nghost + 1
                  newbndy%local_ns_dst_block(iloc_ns) = dst_block_loc
                  newbndy%local_ns_dst_add(1,iloc_ns) = 1
                  newbndy%local_ns_dst_add(2,iloc_ns) = 1

               else
                  !*** source is land block so zero ghost cells
                  iloc_ns = iloc_ns + 1
                  newbndy%local_ns_src_block(iloc_ns) = 0
                  newbndy%local_ns_src_add(1,iloc_ns) = 0
                  newbndy%local_ns_src_add(2,iloc_ns) = 0
                  newbndy%local_ns_dst_block(iloc_ns) = dst_block_loc
                  newbndy%local_ns_dst_add(1,iloc_ns) = 1
                  newbndy%local_ns_dst_add(2,iloc_ns) = 1
               endif

            endif ! north neighbor

            !***
            !*** if this block is a southern neighbor
            !*** determine send/receive addresses
            !***

            if (iblock_dst == iblock_south .and. &
                jblock_dst == jblock_south) then

               if (src_proc /= 0) then
                  !*** local copy
                  iloc_ns = iloc_ns + 1
                  newbndy%local_ns_src_block(iloc_ns) = src_block_loc
                  newbndy%local_ns_src_add(1,iloc_ns) = 1
                  newbndy%local_ns_src_add(2,iloc_ns) = nghost + 1
                  newbndy%local_ns_dst_block(iloc_ns) = dst_block_loc
                  newbndy%local_ns_dst_add(1,iloc_ns) = 1
                  newbndy%local_ns_dst_add(2,iloc_ns) = dbje + 1
               else
                  !*** neighbor is a land block so zero ghost cells
                  iloc_ns = iloc_ns + 1
                  newbndy%local_ns_src_block(iloc_ns) = 0
                  newbndy%local_ns_src_add(1,iloc_ns) = 0
                  newbndy%local_ns_src_add(2,iloc_ns) = 0
                  newbndy%local_ns_dst_block(iloc_ns) = dst_block_loc
                  newbndy%local_ns_dst_add(1,iloc_ns) = 1
                  newbndy%local_ns_dst_add(2,iloc_ns) = dbje + 1
               endif
            endif ! south neighbor

         endif  ! not a land block

      end do
   end do block_loop2

!-----------------------------------------------------------------------
!EOC

 end subroutine mpi2s_create_boundary

!***********************************************************************
!BOP
! !IROUTINE: mpi2s_destroy_boundary
! !INTERFACE:

 subroutine mpi2s_destroy_boundary(in_bndy)

! !DESCRIPTION:
!  This routine destroys a boundary by deallocating all memory
!  associated with the boundary and nullifying pointers.
!
! !REVISION HISTORY:
!  same as module

! !INPUT/OUTPUT PARAMETERS:

   type (bndy), intent(inout) :: &
     in_bndy          ! boundary structure to be destroyed

!EOP
!BOC
!-----------------------------------------------------------------------
!
!  reset all scalars
!
!-----------------------------------------------------------------------

   in_bndy%communicator      = 0
   in_bndy%nlocal_ew         = 0
   in_bndy%nlocal_ns         = 0

!-----------------------------------------------------------------------
!
!  deallocate all pointers
!
!-----------------------------------------------------------------------

   deallocate(in_bndy%local_ew_src_block, &
              in_bndy%local_ew_dst_block, &
              in_bndy%local_ns_src_block, &
              in_bndy%local_ns_dst_block, &
              in_bndy%local_ew_src_add,   &
              in_bndy%local_ew_dst_add,   &
              in_bndy%local_ns_src_add,   &
              in_bndy%local_ns_dst_add)

!-----------------------------------------------------------------------
!EOC

 end subroutine mpi2s_destroy_boundary

 subroutine GetEWBlockIndex(bndy_type,iblock_src,jblock_src, &
                                iblock_east,jblock_east, &
                                iblock_west,jblock_west)

    character(*), intent(in)       :: bndy_type
    integer(i4), intent(in)  :: iblock_src,jblock_src
    integer(i4), intent(out) :: iblock_east,jblock_east, &
                                      iblock_west,jblock_west


      select case(bndy_type)
      case ('cyclic')
         iblock_east = mod(iblock_src,nblocks_x) + 1
         iblock_west = iblock_src - 1
         if (iblock_west == 0) iblock_west = nblocks_x
         jblock_east = jblock_src
         jblock_west = jblock_src
      case ('closed')
         iblock_east = iblock_src + 1
         iblock_west = iblock_src - 1
         if (iblock_east > nblocks_x) iblock_east = 0
         if (iblock_west < 1        ) iblock_west = 0
         jblock_east = jblock_src
         jblock_west = jblock_src
      case default
         call exit_POP(sigAbort, 'Unknown east-west boundary type')
      end select


 end subroutine GetEWBlockIndex

 subroutine GetNSBlockIndex(bndy_type, &
                iblock_src,jblock_src, &
                iblock_north,jblock_north, &
                iblock_south,jblock_south)

    character(*), intent(in)       :: bndy_type
    integer(i4), intent(in)  :: iblock_src,jblock_src
    integer(i4), intent(out) :: iblock_north,jblock_north, &
                                      iblock_south,jblock_south

      select case(bndy_type)
      case ('cyclic')
         jblock_north = mod(jblock_src,nblocks_y) + 1
         jblock_south = jblock_src - 1
         if (jblock_south == 0) jblock_south = nblocks_y
         iblock_north = iblock_src
         iblock_south = iblock_src
      case ('closed')
         jblock_north = jblock_src + 1
         jblock_south = jblock_src - 1
         if (jblock_north > nblocks_y) jblock_north = 0
         if (jblock_south < 1        ) jblock_south = 0
         iblock_north = iblock_src
         iblock_south = iblock_src
      case default
         call exit_POP(sigAbort, 'Unknown north-south boundary type')
      end select


 end subroutine GetNSBlockIndex

!***********************************************************************
!BOP
! !IROUTINE: update_ghost_cells
! !INTERFACE:

 subroutine boundary_2d_dbl(ARRAY, in_bndy, grid_loc, field_type)

! !DESCRIPTION:
!  This routine updates ghost cells for an input array and is a
!  member of a group of routines under the generic interface
!  update\_ghost\_cells.  This routine is the specific interface
!  for 2d horizontal arrays of double precision.
!
! !REVISION HISTORY:
!  same as module

! !INPUT PARAMETERS:

   type (bndy), intent(in) :: &
      in_bndy                 ! boundary update structure for the array

   integer (i4), intent(in) :: &
      field_type,               &! id for type of field (scalar, vector, angle)
      grid_loc                   ! id for location on horizontal grid
                                 !  (center, NEcorner, Nface, Eface)

! !INPUT/OUTPUT PARAMETERS:

   real (r8), dimension(:,:,:), intent(inout) :: &
      ARRAY              ! array containing horizontal slab to update

!EOP
!BOC
!-----------------------------------------------------------------------
!
!  local variables
!
!-----------------------------------------------------------------------

   integer (i4) ::           &
      i,j,k,m,n,                   &! dummy loop indices
      ib_src,ie_src,jb_src,je_src, &! beg,end indices for bndy cells
      ib_dst,ie_dst,jb_dst,je_dst, &!
      nx_global,                   &! global domain size in x
      src_block,                   &! local block number for source
      dst_block,                   &! local block number for destination
      xoffset, yoffset,            &! address shifts for tripole
      isign                         ! sign factor for tripole grids

   real (r8) :: &
      xavg               ! scalar for enforcing symmetry at U pts

!-----------------------------------------------------------------------
!
!  do local copies for east-west ghost cell updates
!  also initialize ghost cells to zero
!
!-----------------------------------------------------------------------

   !call timer_start(bndy_2d_local)
   do n=1,in_bndy%nlocal_ew
      src_block = in_bndy%local_ew_src_block(n)
      dst_block = in_bndy%local_ew_dst_block(n)

      ib_src = in_bndy%local_ew_src_add(1,n)
      ie_src = ib_src + nghost - 1
      ib_dst = in_bndy%local_ew_dst_add(1,n)
      ie_dst = ib_dst + nghost - 1

      if (src_block /= 0) then
         ARRAY(ib_dst:ie_dst,:,dst_block) = &
         ARRAY(ib_src:ie_src,:,src_block)
      else
         ARRAY(ib_dst:ie_dst,:,dst_block) = c0
      endif
   end do

!-----------------------------------------------------------------------
!
!  now exchange north-south boundary info
!
!-----------------------------------------------------------------------

   do n=1,in_bndy%nlocal_ns
      src_block = in_bndy%local_ns_src_block(n)
      dst_block = in_bndy%local_ns_dst_block(n)

      if (dst_block > 0) then ! straight local copy

         jb_src = in_bndy%local_ns_src_add(2,n)
         je_src = jb_src + nghost - 1
         jb_dst = in_bndy%local_ns_dst_add(2,n)
         je_dst = jb_dst + nghost - 1

         if (src_block /= 0) then
            ARRAY(:,jb_dst:je_dst,dst_block) = &
            ARRAY(:,jb_src:je_src,src_block)
         else
            ARRAY(:,jb_dst:je_dst,dst_block) = c0
         endif

      endif
   end do

!-----------------------------------------------------------------------

 end subroutine boundary_2d_dbl

!***********************************************************************
!BOP
! !IROUTINE: update_ghost_cells
! !INTERFACE:

 subroutine boundary_2d_int(ARRAY, in_bndy, grid_loc, field_type)

! !DESCRIPTION:
!  This routine updates ghost cells for an input array and is a
!  member of a group of routines under the generic interface
!  update\_ghost\_cells.  This routine is the specific interface
!  for 2d horizontal arrays of double precision.
!
! !REVISION HISTORY:
!  same as module

! !INPUT PARAMETERS:

   type (bndy), intent(in) :: &
      in_bndy                 ! boundary update structure for the array

   integer (i4), intent(in) :: &
      field_type,               &! id for type of field (scalar, vector, angle)
      grid_loc                   ! id for location on horizontal grid
                                 !  (center, NEcorner, Nface, Eface)

! !INPUT/OUTPUT PARAMETERS:

   integer (i4), dimension(:,:,:), intent(inout) :: &
      ARRAY              ! array containing horizontal slab to update

!EOP
!BOC
!-----------------------------------------------------------------------
!
!  local variables
!
!-----------------------------------------------------------------------

   integer (i4) ::           &
      i,j,k,m,n,                   &! dummy loop indices
      ib_src,ie_src,jb_src,je_src, &! beg,end indices for bndy cells
      ib_dst,ie_dst,jb_dst,je_dst, &!
      nx_global,                   &! global domain size in x
      src_block,                   &! local block number for source
      dst_block,                   &! local block number for destination
      xoffset, yoffset,            &! address shifts for tripole
      isign                         ! sign factor for tripole grids

   integer (i4) :: &
      xavg               ! scalar for enforcing symmetry at U pts

!-----------------------------------------------------------------------
!
!  do local copies for east-west ghost cell updates
!  also initialize ghost cells to zero
!
!-----------------------------------------------------------------------

   print *,'2d_int: in_bndy%nlocal_ew: ',in_bndy%nlocal_ew
   do n=1,in_bndy%nlocal_ew
      src_block = in_bndy%local_ew_src_block(n)
      dst_block = in_bndy%local_ew_dst_block(n)

      ib_src = in_bndy%local_ew_src_add(1,n)
      ie_src = ib_src + nghost - 1
      ib_dst = in_bndy%local_ew_dst_add(1,n)
      ie_dst = ib_dst + nghost - 1

      if (src_block /= 0) then
         ARRAY(ib_dst:ie_dst,:,dst_block) = &
         ARRAY(ib_src:ie_src,:,src_block)
      else
         ARRAY(ib_dst:ie_dst,:,dst_block) = 0
      endif
   end do

!-----------------------------------------------------------------------
!
!  now exchange north-south boundary info
!
!-----------------------------------------------------------------------

   print *,'2d_int: in_bndy%nlocal_ns: ',in_bndy%nlocal_ns
   print *,'2d_int: int_bndy%local_ns_src_block(1:10) ',in_bndy%local_ns_src_block(1:10)
   print *,'2d_int: int_bndy%local_ns_dst_block(1:10) ',in_bndy%local_ns_dst_block(1:10)
   do n=1,in_bndy%nlocal_ns
      src_block = in_bndy%local_ns_src_block(n)
      dst_block = in_bndy%local_ns_dst_block(n)

      if (dst_block > 0) then ! straight local copy

         jb_src = in_bndy%local_ns_src_add(2,n)
         je_src = jb_src + nghost - 1
         jb_dst = in_bndy%local_ns_dst_add(2,n)
         je_dst = jb_dst + nghost - 1

         if (src_block /= 0) then
            ARRAY(:,jb_dst:je_dst,dst_block) = &
            ARRAY(:,jb_src:je_src,src_block)
         else
            ARRAY(:,jb_dst:je_dst,dst_block) = 0
         endif

      endif
   end do

!-----------------------------------------------------------------------

end subroutine boundary_2d_int

!EOC
!***********************************************************************

end module mpi2s_boundary

!|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
